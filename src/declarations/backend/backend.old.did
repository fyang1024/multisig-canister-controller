type canister_id = principal;
type ProposalType = 
 variant {
   operation;
   permission;
 };
type ProposalStatus = 
 variant {
   approved;
   disapproved;
   pending;
 };
type Proposal = 
 record {
   approvers: vec principal;
   canister_id: canister_id;
   canister_operation: CanisterOperation;
   code: opt blob;
   code_hash: opt vec nat8;
   disapprovers: vec principal;
   permission_change: opt PermissionChange;
   proposal_type: ProposalType;
   proposer: principal;
   required_approvals: nat;
   seq: nat;
   status: ProposalStatus;
   total_voters: nat;
 };
type PermissionChange = 
 variant {
   requireMultiSig;
   requireSingleSig;
 };
type CanisterOperation = 
 variant {
   deleteCanister;
   installCode;
   reinstallCode;
   startCanister;
   stopCanister;
   uninstallCode;
   upgradeCode;
 };
service : {
  create_canister: () -> (canister_id);
  delete_canister: (canister_id) -> ();
  get_last_proposal: (canister_id) -> (opt Proposal) query;
  get_minimal_sigs: () -> (nat) query;
  get_owners: () -> (vec principal) query;
  init: (vec principal, nat) -> () oneway;
  install_code: (blob, canister_id) -> ();
  propose: (ProposalType, opt PermissionChange, CanisterOperation,
   canister_id, opt blob) -> () oneway;
  reinstall_code: (blob, canister_id) -> ();
  start_canister: (canister_id) -> ();
  stop_canister: (canister_id) -> ();
  uninstall_code: (canister_id) -> ();
  upgrade_code: (blob, canister_id) -> ();
  vote_against_last_proposal: (canister_id) -> () oneway;
  vote_for_last_proposal: (canister_id) -> ();
}
