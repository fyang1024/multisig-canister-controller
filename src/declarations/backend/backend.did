type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type canister_id = principal;
type ProposalType = 
 variant {
   operation;
   permission;
 };
type ProposalStatus = 
 variant {
   approved;
   disapproved;
   pending;
 };
type Proposal = 
 record {
   approvers: vec principal;
   canister_id: canister_id;
   canister_operation: CanisterOperation;
   code: opt blob;
   code_hash: opt vec nat8;
   disapprovers: vec principal;
   permission_change: opt PermissionChange;
   proposal_type: ProposalType;
   proposer: principal;
   required_approvals: nat;
   seq: nat;
   status: ProposalStatus;
   total_voters: nat;
 };
type PermissionChange = 
 variant {
   requireMultiSig;
   requireSingleSig;
 };
type MultisigCanisterController = 
 service {
   create_canister: () -> (canister_id);
   delete_canister: (canister_id) -> ();
   get_canister_status: (canister_id) -> (CanisterStatus);
   get_canisters: () -> (vec Canister) query;
   get_last_proposal: (canister_id) -> (opt Proposal) query;
   get_minimal_sigs: () -> (nat) query;
   get_owners: () -> (vec principal) query;
   init: (vec principal, nat) -> () oneway;
   install_code: (blob, canister_id) -> ();
   propose: (ProposalType, opt PermissionChange, CanisterOperation,
    canister_id, opt blob) -> () oneway;
   reinstall_code: (blob, canister_id) -> ();
   start_canister: (canister_id) -> ();
   stop_canister: (canister_id) -> ();
   uninstall_code: (canister_id) -> ();
   upgrade_code: (blob, canister_id) -> ();
   vote_against_last_proposal: (canister_id) -> () oneway;
   vote_for_last_proposal: (canister_id) -> ();
 };
type CanisterStatus = 
 record {
   cycles: nat;
   freezing_threshold: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterOperation = 
 variant {
   deleteCanister;
   installCode;
   reinstallCode;
   startCanister;
   stopCanister;
   uninstallCode;
   upgradeCode;
 };
type Canister = 
 record {
   id: canister_id;
   proposals: vec Proposal;
 };
service : () -> MultisigCanisterController
